/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p playlist_manager xml/org.gnome.Rhythmbox3.PlaylistManager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef PLAYLIST_MANAGER_H_1382283267
#define PLAYLIST_MANAGER_H_1382283267

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.DBus.Introspectable
 *
class OrgFreedesktopDBusIntrospectableInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Introspectable"; }

public:
    OrgFreedesktopDBusIntrospectableInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDBusIntrospectableInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> Introspect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Introspect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};


 * Proxy class for interface org.freedesktop.DBus.Peer
 *
class OrgFreedesktopDBusPeerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Peer"; }

public:
    OrgFreedesktopDBusPeerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDBusPeerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> GetMachineId()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetMachineId"), argumentList);
    }

    inline QDBusPendingReply<> Ping()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Ping"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};


 * Proxy class for interface org.freedesktop.DBus.Properties
 *
class OrgFreedesktopDBusPropertiesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

public:
    OrgFreedesktopDBusPropertiesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDBusPropertiesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> Get(const QString &interface_name, const QString &property_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name);
        return asyncCallWithArgumentList(QLatin1String("Get"), argumentList);
    }

    inline QDBusPendingReply<QVariant> GetAll(const QString &interface_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        return asyncCallWithArgumentList(QLatin1String("GetAll"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &interface_name, const QString &property_name, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("Set"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QString &interface_name, const QVariant &changed_properties, const QStringList &invalidated_properties);
};


 * Proxy class for interface org.gnome.Rhythmbox3.PlaylistManager
 */
class OrgGnomeRhythmbox3PlaylistManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.gnome.Rhythmbox3.PlaylistManager"; }

public:
    OrgGnomeRhythmbox3PlaylistManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgGnomeRhythmbox3PlaylistManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddToPlaylist(const QString &playlist, const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(playlist) << QVariant::fromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("AddToPlaylist"), argumentList);
    }

    inline QDBusPendingReply<> CreatePlaylist(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("CreatePlaylist"), argumentList);
    }

    inline QDBusPendingReply<> DeletePlaylist(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("DeletePlaylist"), argumentList);
    }

    inline QDBusPendingReply<> ExportPlaylist(const QString &playlist, const QString &uri, bool mp3_format)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(playlist) << QVariant::fromValue(uri) << QVariant::fromValue(mp3_format);
        return asyncCallWithArgumentList(QLatin1String("ExportPlaylist"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetPlaylists()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetPlaylists"), argumentList);
    }

    inline QDBusPendingReply<> ImportPlaylist(const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("ImportPlaylist"), argumentList);
    }

    inline QDBusPendingReply<> RemoveFromPlaylist(const QString &playlist, const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(playlist) << QVariant::fromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("RemoveFromPlaylist"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};


namespace org {
  /*
  namespace freedesktop {
    namespace DBus {
      typedef ::OrgFreedesktopDBusIntrospectableInterface Introspectable;
      typedef ::OrgFreedesktopDBusPeerInterface Peer;
      typedef ::OrgFreedesktopDBusPropertiesInterface Properties;
    }
  }
  */

  namespace gnome {
    namespace Rhythmbox3 {
      typedef ::OrgGnomeRhythmbox3PlaylistManagerInterface PlaylistManager;
    }
  }
}
#endif
